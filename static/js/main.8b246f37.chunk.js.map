{"version":3,"sources":["components/Search/types.js","components/Search/Search.js","components/Search/action.js","components/Results/Result.js","components/Results/index.js","components/Search/redux/SearchReducer.js","store/rootReducer.js","components/Search/redux/SearchSaga.js","store/rootSaga.js","store/createStore.js","App.js","serviceWorker.js","index.js"],"names":["event","props","a","target","value","trim","getSearchResults","mapDispatchToProps","type","types","connect","className","onChange","onInputChange","placeholder","Result","result","i","from","opacity","transform","to","config","delay","springProps","style","src","toJS","images","original","url","alt","renderSearchResults","searchResults","map","key","id","state","search","get","initialState","Map","SearchReducer","action","merge","fromJS","results","combineReducers","setSearch","watchSearch","axios","data","put","console","log","takeLatest","RootSaga","all","fork","SearchSaga","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPAAe,EACK,qBADL,EAEU,2B,kDCezB,WAA6BA,EAAOC,GAApC,SAAAC,EAAA,sDACoC,KAA9BF,EAAMG,OAAOC,MAAMC,QACrBJ,EAAMK,iBAAiBN,EAAMG,OAAOC,OAFxC,4C,sBAMA,IAAMG,EAAqB,CACzBD,iBCtB8B,SAAAF,GAAK,MAAK,CACxCI,KAAMC,EACNL,WDuBaM,cAAQ,KAAMH,EAAdG,EArBA,SAAAT,GACb,OACE,yBAAKU,UAAU,UACb,2BACEC,SAAU,SAAAZ,GAAK,O,6CAAIa,CAAcb,EAAOC,IACxCa,YAAY,uB,QEQLC,EAhBA,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,EACxB,OACE,kBAAC,SAAD,CACEC,KAAM,CAAEC,QAAS,EAAGC,UAAW,oBAC/BC,GAAI,CAAEF,QAAS,EAAGC,UAAW,mBAC7BE,OAAQ,CAAEC,MAAW,IAAJN,KAEhB,SAAAO,GAAW,OACV,yBAAKC,MAAOD,GACV,yBAAKE,IAAKV,EAAOW,OAAOC,OAAOC,SAASC,IAAKC,IAAI,aCGrDC,EAAsB,SAAAC,GAC1B,OAAOA,EAAcC,KAAI,SAAClB,EAAQC,GAAT,OACvB,kBAAC,EAAD,CAAQA,EAAGA,EAAGkB,IAAKnB,EAAOW,OAAOS,GAAIpB,OAAQA,QAQlCN,eAJS,SAAA2B,GAAK,MAAK,CAChCJ,cAAeI,EAAMC,OAAOC,IAAI,oBAGnB7B,EArBC,SAAAT,GACd,OAAIA,EAAMgC,cAEN,yBAAKtB,UAAU,2CACZqB,EAAoB/B,EAAMgC,gBAI1B,Q,uBCTHO,EAAeC,YAAI,CAAER,cAAe,KAe3BS,EAbO,WAAmC,IAAlCL,EAAiC,uDAAzBG,EAAcG,EAAW,uCACtD,OAAQA,EAAOnC,MACb,KAAKC,EACH,OAAO4B,EAAMO,MAAM,CACjBX,cAAeY,YAAOF,EAAOG,WAGjC,QACE,OAAOT,ICVEU,cAAgB,CAC7BT,OAAQI,I,oCCEAM,G,WAUAC,GAVV,SAAUD,EAAV,8EAGiB,OAHK5C,EAAtB,EAAsBA,MAAtB,SAEU0B,EAFV,0FAEmG1B,EAFnG,sBAGuB8C,IAAMX,IAAIT,GAHjC,OAIW,OADDqB,EAHV,gBAIiBC,aLHcN,EKGMK,EAAKA,KAAKA,KLHJ,CACzC3C,KAAMC,EACNqC,aKHF,0EAMIO,QAAQC,IAAR,MANJ,kCLC+B,IAAAR,IKD/B,iBAUA,SAAUG,IAAV,iEACE,OADF,SACQM,YAAW9C,EAA6BuC,GADhD,uCAIeC,Q,WCjBLO,GAAV,SAAUA,IAAV,iEACE,OADF,SACQC,YAAI,CAACC,YAAKC,KADlB,uCAIeH,QCDTI,EAAiBC,cAEjBC,EAAQC,YAAYC,EAAaC,YAAgBL,IAEvDA,EAAeM,IAAIV,GAEJM,QCIAK,MATf,WACE,OACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.8b246f37.chunk.js","sourcesContent":["export default {\n  setSearchResults: 'ADD_SEARCH_RESULTS',\n  watchGetSearchResults: 'WATCH_GET_SEARCH_RESULTS',\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { getSearchResults } from './action';\nimport '../../index.scss';\n\nconst Search = props => {\n  return (\n    <div className=\"search\">\n      <input\n        onChange={event => onInputChange(event, props)}\n        placeholder=\"search gifs...\"\n      />\n    </div>\n  );\n};\n\nasync function onInputChange(event, props) {\n  if (event.target.value.trim() !== '') {\n    props.getSearchResults(event.target.value);\n  }\n}\n\nconst mapDispatchToProps = {\n  getSearchResults,\n};\n\nexport default connect(null, mapDispatchToProps)(Search);\n","import types from './types';\n\nexport const getSearchResults = value => ({\n  type: types.watchGetSearchResults,\n  value,\n});\n\nexport const setSearchResult = results => ({\n  type: types.setSearchResults,\n  results,\n});\n","import React from 'react';\nimport { Spring } from 'react-spring/renderprops';\n\nconst Result = ({ result, i }) => {\n  return (\n    <Spring\n      from={{ opacity: 0, transform: 'translateY(30px)' }}\n      to={{ opacity: 1, transform: 'translateY(0px)' }}\n      config={{ delay: i * 100 }}\n    >\n      {springProps => (\n        <div style={springProps}>\n          <img src={result.toJS().images.original.url} alt=\"gif\" />\n        </div>\n      )}\n    </Spring>\n  );\n};\n\nexport default Result;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Result from './Result';\n\nconst Results = props => {\n  if (props.searchResults) {\n    return (\n      <div className='d-flex justify-content-center flex-wrap'>\n        {renderSearchResults(props.searchResults)}\n      </div>\n    );\n  }\n  return null;\n};\n\nconst renderSearchResults = searchResults => {\n  return searchResults.map((result, i) => (\n    <Result i={i} key={result.toJS().id} result={result} />\n  ));\n};\n\nconst mapStateToProps = state => ({\n  searchResults: state.search.get('searchResults'),\n});\n\nexport default connect(mapStateToProps)(Results);\n","import { Map, fromJS } from 'immutable';\nimport types from '../types';\n\nconst initialState = Map({ searchResults: [] });\n\nconst SearchReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.setSearchResults: {\n      return state.merge({\n        searchResults: fromJS(action.results),\n      });\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default SearchReducer;\n","import { combineReducers } from 'redux';\nimport SearchReducer from '../components/Search/redux/SearchReducer';\n\nexport default combineReducers({\n  search: SearchReducer,\n});\n","import axios from 'axios';\nimport { takeLatest, put } from 'redux-saga/effects';\n\nimport types from '../types';\nimport { setSearchResult } from '../action';\n\nfunction* setSearch({ value }) {\n  try {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=aeJeMs1msX7iwlMLKUwZmje77f7iud1s&q=${value}&limit=20`;\n    const data = yield axios.get(url);\n    return yield put(setSearchResult(data.data.data));\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nfunction* watchSearch() {\n  yield takeLatest(types.watchGetSearchResults, setSearch);\n}\n\nexport default watchSearch;\n","import { fork, all } from 'redux-saga/effects';\nimport SearchSaga from '../components/Search/redux/SearchSaga';\n\nfunction* RootSaga() {\n  yield all([fork(SearchSaga)]);\n}\n\nexport default RootSaga;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport RootSaga from './rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(RootSaga);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport Search from './components/Search/Search';\nimport Results from './components/Results';\nimport store from './store/createStore';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Search />\n      <Results />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}